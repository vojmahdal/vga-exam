Dobře, na základě obrázku, který jste poskytl, je zde přepis původního zadání:

Zadání:

Napište kód vertex a/nebo fragment shaderu, které implementují následující problém: Jsou předány následující hodnoty vrcholů: pozice a barva. Dále jsou předány samostatné projekční a modelview matice (pro změnu pozice vrcholů). Napište shader(y), které vykreslí daný objekt předanou barvou, pokud je objekt statický. Pokud objekt posouvá (ne rotuje), bude červený.

Jistě, na základě vašeho zadání a předchozích znalostí jsem připravil řešení pomocí GLSL shaderů.

Níže naleznete kód pro vertex a fragment shader, který implementuje požadovanou funkcionalitu, a následně podrobné vysvětlení.

Shadery
Vertex Shader
OpenGL Shading Language

#version 330 core

// Vstupní atributy vrcholu z aplikace
layout (location = 0) in vec3 a_position;      // Pozice vrcholu v modelových souřadnicích
layout (location = 1) in vec4 a_vertexColor;   // Barva vrcholu definovaná v aplikaci

// Uniform proměnné (globální pro shader program, nastavované z aplikace)
uniform mat4 u_modelViewMatrix;   // Modelview matice pro transformaci pozice
uniform mat4 u_projectionMatrix;  // Projekční matice
uniform bool u_isMoving;          // Příznak (true/false), zda se objekt aktuálně posouvá
uniform bool u_isRotating;        // Příznak (true/false), zda se objekt aktuálně otáčí

// Výstupní (varying) proměnné pro fragment shader
// Tyto hodnoty budou interpolovány pro každý fragment
out vec4 v_color;                 // Barva vrcholu pro interpolaci
out flat bool v_isMoving;         // Příznak posunu (používáme 'flat', aby se neinterpoloval)
out flat bool v_isRotating;       // Příznak rotace (používáme 'flat')

void main() {
    // Transformace pozice vrcholu pomocí kombinace modelview a projekční matice
    // Výsledná pozice v clip-space souřadnicích se přiřadí do gl_Position
    gl_Position = u_projectionMatrix * u_modelViewMatrix * vec4(a_position, 1.0);

    // Předání barvy vrcholu a stavových příznaků do fragment shaderu
    v_color = a_vertexColor;
    v_isMoving = u_isMoving;
    v_isRotating = u_isRotating;
}
Fragment Shader
OpenGL Shading Language

#version 330 core

// Vstupní (varying) proměnné z vertex shaderu (interpolované hodnoty)
in vec4 v_color;               // Interpolovaná barva z vertex shaderu
in flat bool v_isMoving;       // Příznak posunu (z vertex shaderu, neinterpolovaný)
in flat bool v_isRotating;     // Příznak rotace (z vertex shaderu, neinterpolovaný)

// Výstupní barva fragmentu (pixelu)
out vec4 gl_FragColor;

void main() {
    // Inicializace výsledné barvy fragmentu na základě původní barvy vrcholu
    vec4 outputColor = v_color;

    // Podmínka pro změnu barvy na červenou:
    // Objekt se posouvá (u_isMoving == true) ALE zároveň se neotáčí (u_isRotating == false).
    // Tento stav je zjištěn na základě příznaků v_isMoving a v_isRotating,
    // které jsou předány z aplikace přes vertex shader.
    if (v_isMoving &&!v_isRotating) {
        // Modifikace RGB složek: barva se změní na červenou.
        // Alfa kanál zůstává z původní barvy (v_color.a) nebo může být nastaven na 1.0 pro plnou viditelnost.
        outputColor = vec4(1.0, 0.0, 0.0, v_color.a); // Červená barva
    }
    // Pokud podmínka není splněna (objekt je statický, nebo se otáčí, nebo se posouvá A ZÁROVEŇ otáčí),
    // použije se původní barva v_color, která byla nastavena na začátku.

    // Přiřazení finální vypočítané barvy do výstupní proměnné gl_FragColor
    gl_FragColor = outputColor;
}
Vysvětlení kódu
Vertex Shader
Vstupní atributy:
in vec3 a_position;: Přijímá 3D pozici každého vrcholu objektu.    
in vec4 a_vertexColor;: Přijímá RGBA barvu definovanou pro každý vrchol.    
Uniform proměnné:
uniform mat4 u_modelViewMatrix;: Modelview matice předaná z aplikace, používaná k transformaci vrcholů z modelového do pohledového prostoru.    
uniform mat4 u_projectionMatrix;: Projekční matice předaná z aplikace, používaná k transformaci z pohledového do clip-space.    
uniform bool u_isMoving;: Booleovský příznak z aplikace, který signalizuje, zda se objekt aktuálně posouvá. Shader sám o sobě pohyb v čase nedetekuje; reaguje na tento externě dodaný stav.    
uniform bool u_isRotating;: Booleovský příznak z aplikace, signalizující, zda se objekt aktuálně otáčí.    
Výstupní (varying) proměnné:
out vec4 v_color;: Přenáší původní barvu vrcholu (a_vertexColor) do fragment shaderu. Tato hodnota bude interpolována.    
out flat bool v_isMoving; a out flat bool v_isRotating;: Přenášejí stavové příznaky do fragment shaderu. Kvalifikátor flat zajišťuje, že booleovská hodnota nebude interpolována a bude pro všechny fragmenty daného primitiva stejná.    
Funkce main():
gl_Position = u_projectionMatrix * u_modelViewMatrix * vec4(a_position, 1.0);: Standardní transformace pozice vrcholu. Vektor pozice a_position je rozšířen na vec4 a poté násoben modelview a projekční maticí, čímž se získá finální pozice v clip-space.    
Původní barva a_vertexColor a příznaky u_isMoving, u_isRotating jsou přiřazeny odpovídajícím out proměnným pro použití ve fragment shaderu.
Fragment Shader
Vstupní (varying) proměnné:
in vec4 v_color;: Přijímá interpolovanou barvu z vertex shaderu.    
in flat bool v_isMoving;: Přijímá neinterpolovaný příznak posunu.
in flat bool v_isRotating;: Přijímá neinterpolovaný příznak rotace.
Výstupní proměnná:
out vec4 gl_FragColor;: Definuje finální RGBA barvu fragmentu.    
Funkce main():
vec4 outputColor = v_color;: Výsledná barva je nejprve nastavena na původní barvu vrcholu. Toto je barva pro "statický" případ, a také pro případy, které nesplňují specifickou podmínku pro červenou barvu.
Podmínka pro červenou barvu:
if (v_isMoving &&!v_isRotating): Zkontroluje, zda je příznak v_isMoving pravdivý (objekt se posouvá) A ZÁROVEŇ příznak v_isRotating je nepravdivý (objekt se neotáčí). Tento kombinovaný stav je zjištěn na základě hodnot předaných z aplikace.
outputColor = vec4(1.0, 0.0, 0.0, v_color.a);: Pokud je podmínka splněna, RGB složky outputColor jsou nastaveny na červenou ((1.0, 0.0, 0.0)). Alfa kanál (v_color.a) je převzat z původní barvy, aby se zachovala původní průhlednost. Alternativně by zde mohla být pevně nastavena alfa na 1.0 pro plnou neprůhlednost červené barvy.    
gl_FragColor = outputColor;: Finální určená barva je přiřazena výstupu fragment shaderu.
Toto řešení předpokládá, že aplikační logika na CPU správně vyhodnocuje stavy "posouvá se" a "otáčí se" a předává odpovídající booleovské hodnoty do uniform proměnných u_isMoving a u_isRotating každý snímek.    


Sources and related content
